
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "EventEmitters.h"


namespace facebook::react {

void PasteTextInputEventEmitter::onBlur(OnBlur $event) const {
  dispatchEvent("blur", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onChange(OnChange $event) const {
  dispatchEvent("change", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "eventCount", $event.eventCount);
$payload.setProperty(runtime, "text", $event.text);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onChangeText(OnChangeText $event) const {
  dispatchEvent("changeText", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "eventCount", $event.eventCount);
$payload.setProperty(runtime, "text", $event.text);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onEndEditing(OnEndEditing $event) const {
  dispatchEvent("endEditing", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "text", $event.text);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onFocus(OnFocus $event) const {
  dispatchEvent("focus", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onKeyPress(OnKeyPress $event) const {
  dispatchEvent("keyPress", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "key", $event.key);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onPaste(OnPaste $event) const {
  dispatchEvent("paste", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    auto data = jsi::Array(runtime, $event.data.size());
    size_t dataIndex = 0;
    for (auto dataValue : $event.data) {
      auto dataObject = jsi::Object(runtime);
      dataObject.setProperty(runtime, "fileName", dataValue.fileName);
dataObject.setProperty(runtime, "fileSize", dataValue.fileSize);
dataObject.setProperty(runtime, "type", dataValue.type);
dataObject.setProperty(runtime, "uri", dataValue.uri);
      data.setValueAtIndex(runtime, dataIndex++, dataObject);
    }
    $payload.setProperty(runtime, "data", data);
  
{
  auto error = jsi::Object(runtime);
  error.setProperty(runtime, "message", $event.error.message);
  $payload.setProperty(runtime, "error", error);
}
    return $payload;
  });
}


void PasteTextInputEventEmitter::onSubmitEdition(OnSubmitEdition $event) const {
  dispatchEvent("submitEdition", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "text", $event.text);
    return $payload;
  });
}


void PasteTextInputEventEmitter::onContentSizeChange(OnContentSizeChange $event) const {
  dispatchEvent("contentSizeChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
{
  auto contentSize = jsi::Object(runtime);
  contentSize.setProperty(runtime, "width", $event.contentSize.width);
  contentSize.setProperty(runtime, "height", $event.contentSize.height);
  $payload.setProperty(runtime, "contentSize", contentSize);
}
    return $payload;
  });
}


void PasteTextInputEventEmitter::onScroll(OnScroll $event) const {
  dispatchEvent("scroll", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
{
  auto contentInset = jsi::Object(runtime);
  contentInset.setProperty(runtime, "top", $event.contentInset.top);
  contentInset.setProperty(runtime, "bottom", $event.contentInset.bottom);
  contentInset.setProperty(runtime, "left", $event.contentInset.left);
  contentInset.setProperty(runtime, "right", $event.contentInset.right);
  $payload.setProperty(runtime, "contentInset", contentInset);
}
{
  auto contentOffset = jsi::Object(runtime);
  contentOffset.setProperty(runtime, "x", $event.contentOffset.x);
  contentOffset.setProperty(runtime, "y", $event.contentOffset.y);
  $payload.setProperty(runtime, "contentOffset", contentOffset);
}
{
  auto contentSize = jsi::Object(runtime);
  contentSize.setProperty(runtime, "width", $event.contentSize.width);
  contentSize.setProperty(runtime, "height", $event.contentSize.height);
  $payload.setProperty(runtime, "contentSize", contentSize);
}
{
  auto layoutMeasurement = jsi::Object(runtime);
  layoutMeasurement.setProperty(runtime, "width", $event.layoutMeasurement.width);
  layoutMeasurement.setProperty(runtime, "height", $event.layoutMeasurement.height);
  $payload.setProperty(runtime, "layoutMeasurement", layoutMeasurement);
}
$payload.setProperty(runtime, "responderIgnoreScroll", $event.responderIgnoreScroll);
{
  auto velocity = jsi::Object(runtime);
  velocity.setProperty(runtime, "x", $event.velocity.x);
  velocity.setProperty(runtime, "y", $event.velocity.y);
  $payload.setProperty(runtime, "velocity", velocity);
}
    return $payload;
  });
}


void PasteTextInputEventEmitter::onSelectionChange(OnSelectionChange $event) const {
  dispatchEvent("selectionChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
{
  auto selection = jsi::Object(runtime);
  selection.setProperty(runtime, "start", $event.selection.start);
  selection.setProperty(runtime, "end", $event.selection.end);
  $payload.setProperty(runtime, "selection", selection);
}
    return $payload;
  });
}


void PasteTextInputEventEmitter::onTextInput(OnTextInput $event) const {
  dispatchEvent("textInput", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "target", $event.target);
$payload.setProperty(runtime, "text", $event.text);
$payload.setProperty(runtime, "previousText", $event.previousText);
{
  auto range = jsi::Object(runtime);
  range.setProperty(runtime, "start", $event.range.start);
  range.setProperty(runtime, "end", $event.range.end);
  $payload.setProperty(runtime, "range", range);
}
    return $payload;
  });
}

} // namespace facebook::react
