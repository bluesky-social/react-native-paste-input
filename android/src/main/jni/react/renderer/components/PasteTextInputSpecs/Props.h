
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/attributedstring/TextAttributes.h>
#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>
#include <react/renderer/graphics/Color.h>
#include <react/renderer/components/textinput/BaseTextInputProps.h>

namespace facebook::react {

enum class PasteTextInputAutoCapitalize { None, Sentences, Words, Characters };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputAutoCapitalize &result) {
  auto string = (std::string)value;
  if (string == "none") { result = PasteTextInputAutoCapitalize::None; return; }
  if (string == "sentences") { result = PasteTextInputAutoCapitalize::Sentences; return; }
  if (string == "words") { result = PasteTextInputAutoCapitalize::Words; return; }
  if (string == "characters") { result = PasteTextInputAutoCapitalize::Characters; return; }
  abort();
}

static inline std::string toString(const PasteTextInputAutoCapitalize &value) {
  switch (value) {
    case PasteTextInputAutoCapitalize::None: return "none";
    case PasteTextInputAutoCapitalize::Sentences: return "sentences";
    case PasteTextInputAutoCapitalize::Words: return "words";
    case PasteTextInputAutoCapitalize::Characters: return "characters";
  }
}
enum class PasteTextInputAutoComplete { BirthdateDay, BirthdateFull, BirthdateMonth, BirthdateYear, CcCsc, CcExp, CcExpDay, CcExpMonth, CcExpYear, CcNumber, Email, Gender, Name, NameFamily, NameGiven, NameMiddle, NameMiddleInitial, NamePrefix, NameSuffix, Password, PasswordNew, PostalAddress, PostalAddressCountry, PostalAddressExtended, PostalAddressExtendedPostalCode, PostalAddressLocality, PostalAddressRegion, PostalCode, StreetAddress, SmsOtp, Tel, TelCountryCode, TelNational, TelDevice, Username, UsernameNew, Off };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputAutoComplete &result) {
  auto string = (std::string)value;
  if (string == "birthdate-day") { result = PasteTextInputAutoComplete::BirthdateDay; return; }
  if (string == "birthdate-full") { result = PasteTextInputAutoComplete::BirthdateFull; return; }
  if (string == "birthdate-month") { result = PasteTextInputAutoComplete::BirthdateMonth; return; }
  if (string == "birthdate-year") { result = PasteTextInputAutoComplete::BirthdateYear; return; }
  if (string == "cc-csc") { result = PasteTextInputAutoComplete::CcCsc; return; }
  if (string == "cc-exp") { result = PasteTextInputAutoComplete::CcExp; return; }
  if (string == "cc-exp-day") { result = PasteTextInputAutoComplete::CcExpDay; return; }
  if (string == "cc-exp-month") { result = PasteTextInputAutoComplete::CcExpMonth; return; }
  if (string == "cc-exp-year") { result = PasteTextInputAutoComplete::CcExpYear; return; }
  if (string == "cc-number") { result = PasteTextInputAutoComplete::CcNumber; return; }
  if (string == "email") { result = PasteTextInputAutoComplete::Email; return; }
  if (string == "gender") { result = PasteTextInputAutoComplete::Gender; return; }
  if (string == "name") { result = PasteTextInputAutoComplete::Name; return; }
  if (string == "name-family") { result = PasteTextInputAutoComplete::NameFamily; return; }
  if (string == "name-given") { result = PasteTextInputAutoComplete::NameGiven; return; }
  if (string == "name-middle") { result = PasteTextInputAutoComplete::NameMiddle; return; }
  if (string == "name-middle-initial") { result = PasteTextInputAutoComplete::NameMiddleInitial; return; }
  if (string == "name-prefix") { result = PasteTextInputAutoComplete::NamePrefix; return; }
  if (string == "name-suffix") { result = PasteTextInputAutoComplete::NameSuffix; return; }
  if (string == "password") { result = PasteTextInputAutoComplete::Password; return; }
  if (string == "password-new") { result = PasteTextInputAutoComplete::PasswordNew; return; }
  if (string == "postal-address") { result = PasteTextInputAutoComplete::PostalAddress; return; }
  if (string == "postal-address-country") { result = PasteTextInputAutoComplete::PostalAddressCountry; return; }
  if (string == "postal-address-extended") { result = PasteTextInputAutoComplete::PostalAddressExtended; return; }
  if (string == "postal-address-extended-postal-code") { result = PasteTextInputAutoComplete::PostalAddressExtendedPostalCode; return; }
  if (string == "postal-address-locality") { result = PasteTextInputAutoComplete::PostalAddressLocality; return; }
  if (string == "postal-address-region") { result = PasteTextInputAutoComplete::PostalAddressRegion; return; }
  if (string == "postal-code") { result = PasteTextInputAutoComplete::PostalCode; return; }
  if (string == "street-address") { result = PasteTextInputAutoComplete::StreetAddress; return; }
  if (string == "sms-otp") { result = PasteTextInputAutoComplete::SmsOtp; return; }
  if (string == "tel") { result = PasteTextInputAutoComplete::Tel; return; }
  if (string == "tel-country-code") { result = PasteTextInputAutoComplete::TelCountryCode; return; }
  if (string == "tel-national") { result = PasteTextInputAutoComplete::TelNational; return; }
  if (string == "tel-device") { result = PasteTextInputAutoComplete::TelDevice; return; }
  if (string == "username") { result = PasteTextInputAutoComplete::Username; return; }
  if (string == "username-new") { result = PasteTextInputAutoComplete::UsernameNew; return; }
  if (string == "off") { result = PasteTextInputAutoComplete::Off; return; }
  abort();
}

static inline std::string toString(const PasteTextInputAutoComplete &value) {
  switch (value) {
    case PasteTextInputAutoComplete::BirthdateDay: return "birthdate-day";
    case PasteTextInputAutoComplete::BirthdateFull: return "birthdate-full";
    case PasteTextInputAutoComplete::BirthdateMonth: return "birthdate-month";
    case PasteTextInputAutoComplete::BirthdateYear: return "birthdate-year";
    case PasteTextInputAutoComplete::CcCsc: return "cc-csc";
    case PasteTextInputAutoComplete::CcExp: return "cc-exp";
    case PasteTextInputAutoComplete::CcExpDay: return "cc-exp-day";
    case PasteTextInputAutoComplete::CcExpMonth: return "cc-exp-month";
    case PasteTextInputAutoComplete::CcExpYear: return "cc-exp-year";
    case PasteTextInputAutoComplete::CcNumber: return "cc-number";
    case PasteTextInputAutoComplete::Email: return "email";
    case PasteTextInputAutoComplete::Gender: return "gender";
    case PasteTextInputAutoComplete::Name: return "name";
    case PasteTextInputAutoComplete::NameFamily: return "name-family";
    case PasteTextInputAutoComplete::NameGiven: return "name-given";
    case PasteTextInputAutoComplete::NameMiddle: return "name-middle";
    case PasteTextInputAutoComplete::NameMiddleInitial: return "name-middle-initial";
    case PasteTextInputAutoComplete::NamePrefix: return "name-prefix";
    case PasteTextInputAutoComplete::NameSuffix: return "name-suffix";
    case PasteTextInputAutoComplete::Password: return "password";
    case PasteTextInputAutoComplete::PasswordNew: return "password-new";
    case PasteTextInputAutoComplete::PostalAddress: return "postal-address";
    case PasteTextInputAutoComplete::PostalAddressCountry: return "postal-address-country";
    case PasteTextInputAutoComplete::PostalAddressExtended: return "postal-address-extended";
    case PasteTextInputAutoComplete::PostalAddressExtendedPostalCode: return "postal-address-extended-postal-code";
    case PasteTextInputAutoComplete::PostalAddressLocality: return "postal-address-locality";
    case PasteTextInputAutoComplete::PostalAddressRegion: return "postal-address-region";
    case PasteTextInputAutoComplete::PostalCode: return "postal-code";
    case PasteTextInputAutoComplete::StreetAddress: return "street-address";
    case PasteTextInputAutoComplete::SmsOtp: return "sms-otp";
    case PasteTextInputAutoComplete::Tel: return "tel";
    case PasteTextInputAutoComplete::TelCountryCode: return "tel-country-code";
    case PasteTextInputAutoComplete::TelNational: return "tel-national";
    case PasteTextInputAutoComplete::TelDevice: return "tel-device";
    case PasteTextInputAutoComplete::Username: return "username";
    case PasteTextInputAutoComplete::UsernameNew: return "username-new";
    case PasteTextInputAutoComplete::Off: return "off";
  }
}
enum class PasteTextInputKeyboardType { Default, EmailAddress, Numeric, PhonePad, NumberPad, DecimalPad, Url, AsciiCapable, NumbersAndPunctuation, NamePhonePad, Twitter, WebSearch, VisiblePassword };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputKeyboardType &result) {
  auto string = (std::string)value;
  if (string == "default") { result = PasteTextInputKeyboardType::Default; return; }
  if (string == "email-address") { result = PasteTextInputKeyboardType::EmailAddress; return; }
  if (string == "numeric") { result = PasteTextInputKeyboardType::Numeric; return; }
  if (string == "phone-pad") { result = PasteTextInputKeyboardType::PhonePad; return; }
  if (string == "number-pad") { result = PasteTextInputKeyboardType::NumberPad; return; }
  if (string == "decimal-pad") { result = PasteTextInputKeyboardType::DecimalPad; return; }
  if (string == "url") { result = PasteTextInputKeyboardType::Url; return; }
  if (string == "ascii-capable") { result = PasteTextInputKeyboardType::AsciiCapable; return; }
  if (string == "numbers-and-punctuation") { result = PasteTextInputKeyboardType::NumbersAndPunctuation; return; }
  if (string == "name-phone-pad") { result = PasteTextInputKeyboardType::NamePhonePad; return; }
  if (string == "twitter") { result = PasteTextInputKeyboardType::Twitter; return; }
  if (string == "web-search") { result = PasteTextInputKeyboardType::WebSearch; return; }
  if (string == "visible-password") { result = PasteTextInputKeyboardType::VisiblePassword; return; }
  abort();
}

static inline std::string toString(const PasteTextInputKeyboardType &value) {
  switch (value) {
    case PasteTextInputKeyboardType::Default: return "default";
    case PasteTextInputKeyboardType::EmailAddress: return "email-address";
    case PasteTextInputKeyboardType::Numeric: return "numeric";
    case PasteTextInputKeyboardType::PhonePad: return "phone-pad";
    case PasteTextInputKeyboardType::NumberPad: return "number-pad";
    case PasteTextInputKeyboardType::DecimalPad: return "decimal-pad";
    case PasteTextInputKeyboardType::Url: return "url";
    case PasteTextInputKeyboardType::AsciiCapable: return "ascii-capable";
    case PasteTextInputKeyboardType::NumbersAndPunctuation: return "numbers-and-punctuation";
    case PasteTextInputKeyboardType::NamePhonePad: return "name-phone-pad";
    case PasteTextInputKeyboardType::Twitter: return "twitter";
    case PasteTextInputKeyboardType::WebSearch: return "web-search";
    case PasteTextInputKeyboardType::VisiblePassword: return "visible-password";
  }
}
enum class PasteTextInputReturnKeyType { Done, Go, Next, Search, Send, None, Previous, Default, EmergencyCall, Google, Join, Route, Yahoo };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputReturnKeyType &result) {
  auto string = (std::string)value;
  if (string == "done") { result = PasteTextInputReturnKeyType::Done; return; }
  if (string == "go") { result = PasteTextInputReturnKeyType::Go; return; }
  if (string == "next") { result = PasteTextInputReturnKeyType::Next; return; }
  if (string == "search") { result = PasteTextInputReturnKeyType::Search; return; }
  if (string == "send") { result = PasteTextInputReturnKeyType::Send; return; }
  if (string == "none") { result = PasteTextInputReturnKeyType::None; return; }
  if (string == "previous") { result = PasteTextInputReturnKeyType::Previous; return; }
  if (string == "default") { result = PasteTextInputReturnKeyType::Default; return; }
  if (string == "emergency-call") { result = PasteTextInputReturnKeyType::EmergencyCall; return; }
  if (string == "google") { result = PasteTextInputReturnKeyType::Google; return; }
  if (string == "join") { result = PasteTextInputReturnKeyType::Join; return; }
  if (string == "route") { result = PasteTextInputReturnKeyType::Route; return; }
  if (string == "yahoo") { result = PasteTextInputReturnKeyType::Yahoo; return; }
  abort();
}

static inline std::string toString(const PasteTextInputReturnKeyType &value) {
  switch (value) {
    case PasteTextInputReturnKeyType::Done: return "done";
    case PasteTextInputReturnKeyType::Go: return "go";
    case PasteTextInputReturnKeyType::Next: return "next";
    case PasteTextInputReturnKeyType::Search: return "search";
    case PasteTextInputReturnKeyType::Send: return "send";
    case PasteTextInputReturnKeyType::None: return "none";
    case PasteTextInputReturnKeyType::Previous: return "previous";
    case PasteTextInputReturnKeyType::Default: return "default";
    case PasteTextInputReturnKeyType::EmergencyCall: return "emergency-call";
    case PasteTextInputReturnKeyType::Google: return "google";
    case PasteTextInputReturnKeyType::Join: return "join";
    case PasteTextInputReturnKeyType::Route: return "route";
    case PasteTextInputReturnKeyType::Yahoo: return "yahoo";
  }
}
enum class PasteTextInputSubmitBehavior { Submit, BlurAndSubmit, Newline };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputSubmitBehavior &result) {
  auto string = (std::string)value;
  if (string == "submit") { result = PasteTextInputSubmitBehavior::Submit; return; }
  if (string == "blurAndSubmit") { result = PasteTextInputSubmitBehavior::BlurAndSubmit; return; }
  if (string == "newline") { result = PasteTextInputSubmitBehavior::Newline; return; }
  abort();
}

static inline std::string toString(const PasteTextInputSubmitBehavior &value) {
  switch (value) {
    case PasteTextInputSubmitBehavior::Submit: return "submit";
    case PasteTextInputSubmitBehavior::BlurAndSubmit: return "blurAndSubmit";
    case PasteTextInputSubmitBehavior::Newline: return "newline";
  }
}
enum class PasteTextInputTextBreakStrategy { Simple, HighQuality, Balanced };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputTextBreakStrategy &result) {
  auto string = (std::string)value;
  if (string == "simple") { result = PasteTextInputTextBreakStrategy::Simple; return; }
  if (string == "highQuality") { result = PasteTextInputTextBreakStrategy::HighQuality; return; }
  if (string == "balanced") { result = PasteTextInputTextBreakStrategy::Balanced; return; }
  abort();
}

static inline std::string toString(const PasteTextInputTextBreakStrategy &value) {
  switch (value) {
    case PasteTextInputTextBreakStrategy::Simple: return "simple";
    case PasteTextInputTextBreakStrategy::HighQuality: return "highQuality";
    case PasteTextInputTextBreakStrategy::Balanced: return "balanced";
  }
}
struct PasteTextInputSelectionStruct {
  int start{0};
  int end{0};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputSelectionStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_start = map.find("start");
  if (tmp_start != map.end()) {
    fromRawValue(context, tmp_start->second, result.start);
  }
  auto tmp_end = map.find("end");
  if (tmp_end != map.end()) {
    fromRawValue(context, tmp_end->second, result.end);
  }
}

static inline std::string toString(const PasteTextInputSelectionStruct &value) {
  return "[Object PasteTextInputSelectionStruct]";
}

struct PasteTextInputTextShadowOffsetStruct {
  double width{0.0};
  double height{0.0};
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, PasteTextInputTextShadowOffsetStruct &result) {
  auto map = (std::unordered_map<std::string, RawValue>)value;

  auto tmp_width = map.find("width");
  if (tmp_width != map.end()) {
    fromRawValue(context, tmp_width->second, result.width);
  }
  auto tmp_height = map.find("height");
  if (tmp_height != map.end()) {
    fromRawValue(context, tmp_height->second, result.height);
  }
}

static inline std::string toString(const PasteTextInputTextShadowOffsetStruct &value) {
  return "[Object PasteTextInputTextShadowOffsetStruct]";
}
class PasteTextInputProps final : public BaseTextInputProps {
 public:
  PasteTextInputProps() = default;
  PasteTextInputProps(const PropsParserContext& context, const PasteTextInputProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  bool allowFontScaling{false};
  PasteTextInputAutoCapitalize autoCapitalize{PasteTextInputAutoCapitalize::None};
  PasteTextInputAutoComplete autoComplete{PasteTextInputAutoComplete::Off};
  bool autoCorrect{false};
  bool autoFocus{false};
  bool blurOnSubmit{false};
  bool caretHidden{false};
  std::string clearButtonMode{};
  bool clearTextOnFocus{false};
  bool contextMenuHidden{false};
  std::string defaultValue{};
  bool disableCopyPaste{false};
  bool disableFullscreenUI{false};
  bool editable{false};
  bool enablesReturnKeyAutomatically{false};
  std::string importantForAutofill{};
  std::string inlineImageLeft{};
  int inlineImagePadding{0};
  std::string inputAccessoryViewID{};
  std::string keyboardAppearance{};
  PasteTextInputKeyboardType keyboardType{PasteTextInputKeyboardType::Default};
  Float maxFontSizeMultiplier{0.0};
  int maxLength{0};
  int mostRecentEventCount{0};
  bool multiline{false};
  int numberOfLines{0};
  std::string passwordRules{};
  std::string placeholder{};
  SharedColor placeholderTextColor{};
  std::string returnKeyLabel{};
  PasteTextInputReturnKeyType returnKeyType{PasteTextInputReturnKeyType::Done};
  bool scrollEnabled{false};
  bool secureTextEntry{false};
  PasteTextInputSelectionStruct selection{};
  SharedColor selectionColor{};
  SharedColor selectionHandleColor{};
  bool selectTextOnFocus{false};
  bool showSoftInputOnFocus{false};
  bool smartInsertDelete{false};
  std::string smartPunctuation{};
  bool spellCheck{false};
  PasteTextInputSubmitBehavior submitBehavior{PasteTextInputSubmitBehavior::Submit};
  std::string text{};
  PasteTextInputTextBreakStrategy textBreakStrategy{PasteTextInputTextBreakStrategy::Simple};
  std::string textContentType{};
  SharedColor underlineColorAndroid{};
  std::string value{};
  SharedColor textShadowColor{};
  Float textShadowRadius{0.0};
  std::string textDecorationLine{};
  std::string fontStyle{};
  PasteTextInputTextShadowOffsetStruct textShadowOffset{};
  Float lineHeight{0.0};
  std::string textTransform{};
  int color{0};
  Float letterSpacing{0.0};
  Float fontSize{0.0};
  std::string textAlign{};
  bool includeFontPadding{false};
  std::string fontWeight{};
  std::string fontFamily{};
  std::string textAlignVertical{};
  SharedColor cursorColor{};


    /**
     * Auxiliary information to detect if these props are set or not.
     * See AndroidTextInputComponentDescriptor for usage.
     * TODO T63008435: can these, and this feature, be removed entirely?
     */
    bool hasPadding{};
    bool hasPaddingHorizontal{};
    bool hasPaddingVertical{};
    bool hasPaddingLeft{};
    bool hasPaddingTop{};
    bool hasPaddingRight{};
    bool hasPaddingBottom{};
    bool hasPaddingStart{};
    bool hasPaddingEnd{};
};

} // namespace facebook::react
